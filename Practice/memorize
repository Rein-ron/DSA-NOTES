


Stack* init(){
    Stack* newStack = malloc(sizeof(Stack));
    newStack->top = NULL;

    return newStack;
}


bool isFull(Stack* S){
    return false;
}

bool isEmpty(Stack* S){
    return S->top == NULL;
}

void push(Stack* S, int data){
    Node* newNode = sizeof(sizeof(Node));
    newNode->data = data;
    newNode->next = S->top;
    S->top = newNode;
}


int pop(Stack* S){
    int value;
    if(!isEmpty(S)){
        Node* temp = S->top;
        value = S->top->data;
        S->top = temp->next;
        free(temp);
    }

    return value;
}

int peek(Stack* S){
    if(!isEmpty(S)){
        return S->top->data;
    }
}


Queue* init(){
    Queue* newQueue = malloc(sizeof(Queue));
    newQueue->front = NULL;
    newQueue->rear = NULL;

    return newQueue;
}

bool isFull(Queue* Q){
    return false;
}

bool isEmpty(Queue* Q){
    return Q->front == NULL;
}

void enqueue(Queue* Q, int data){
    Node* newNode = malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if(isEmpty(Q)){
        Q->front = newNode;
        Q->rear = newNode;
    }else{
        Q->rear->next = newNode;
        Q->rear = newNode;
    }
}

int dequeue(Queue* Q){
    if(isEmpty(Q)){
        return -1;
    }
    int value;
    Node* temp;
    temp = Q->front;
    value = Q->front->data;
    Q->front = Q->front->next;

    if(isEmpty(Q)){
        Q->rear = NULL;
    }

    free(temp);
    return value;
}

int front(Queue* Q){
    if(isEmpty(Q)){
        return -1;
    }
    return Q->front->data;
}

void display(Queue* Q){
    Node* trav = Q->front; 

    while(trav != NULL){
        printf("%d ", trav->data);
        trav = trav->next;
    }

    printf("\n");
}